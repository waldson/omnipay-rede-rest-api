<?php
namespace Omnipay\Rede\Message;

use InvalidArgumentException;
use Omnipay\Common\CreditCard;
use Omnipay\Common\Exception\InvalidRequestException;
use Omnipay\Rede\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-11-07 at 19:08:31.
 */
class PurchaseRequestTest extends TestCase
{

    /**
     * @var AuthorizationRequest
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PurchaseRequest(
            $this->getHttpClient(),
            $this->getHttpRequest(),
            'NTAwNzk1NTc6NDkxM2JiMjRhMDI4NDk1NGJlNzJjNDI1OGUyMjliODY=',//token de homologação do manual
            \Omnipay\Rede\Gateway::TEST_ENDPOINT
        );
    }


    public function testDoCapture()
    {
        $this->populateObject();
        $data = $this->object->getData();
        $this->assertArrayHasKey('capture', $data);
        $this->assertTrue($data['capture']);
    }

    public function testSuccessfulTransaction()
    {
        $gateway = \Omnipay\Omnipay::getFactory()->create('Rede');
        $gateway->setTestMode(true);
        $defaultParameters = $gateway->getDefaultParameters();
        $gateway->setMerchantId($defaultParameters['merchantId']);
        $gateway->setMerchantKey($defaultParameters['merchantKey']);

        $this->object = $gateway->purchase();
        $this->populateValidObject();

        $response = $this->object->send();

        $this->assertTrue($response->isSuccessful());
    }

    public function testFailedTransaction()
    {
        $gateway = \Omnipay\Omnipay::getFactory()->create('Rede');
        $gateway->setTestMode(true);
        $defaultParameters = $gateway->getDefaultParameters();
        $gateway->setMerchantId($defaultParameters['merchantId']);
        $gateway->setMerchantKey($defaultParameters['merchantKey']);

        $this->object = $gateway->purchase();
        $this->populateObject();

        $response = $this->object->send();

        $this->assertFalse($response->isSuccessful());
    }

    private function populateObject()
    {
        $card = new CreditCard();
        $this->object->setTestMode(true);
        $this->object->setCard($card);
        $this->object->getCard()
            ->setName('Waldosn Patrício')
            ->setCvv(123)
            ->setNumber('4485787226954681')
            ->setExpiryYear(date('Y') + 1)
            ->setExpiryMonth(5);
        $this->object->setAmount(100.00);
        $this->object->setReference(uniqid());
    }

    private function populateValidObject()
    {
        $card = new CreditCard();
        $this->object->setTestMode(true);
        $this->object->setCard($card);
        $this->object->getCard()
            ->setName('Waldosn Patrício')
            ->setCvv(132)
            ->setNumber('5448280000000007')
            ->setExpiryYear(date('Y') + 1)
            ->setExpiryMonth(1);
        $this->object->setAmount(100.00);
        $this->object->setReference(uniqid());
    }

}
